Index: design.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\n# Copyright (c) 2024, Tencent Inc. All rights reserved.\nimport argparse\nimport os\nimport sys\n\nimport torch\nimport tqdm\n\nfrom IgGM.protein import cal_ppi\n\nsys.path.append('.')\n\nfrom IgGM.deploy import AbDesigner\nfrom IgGM.utils import setup\nfrom IgGM.protein.parser import parse_fasta, PdbParser\nfrom IgGM.model.pretrain import esm_ppi_650m_ab, antibody_design_trunk, IGSO3Buffer_trunk\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Antibody sequence and structure co-design w/ IgGM')\n    parser.add_argument('--fasta', '-f', type=str, required=True, help='Directory path to input antibody FASTA files, X for design region')\n    parser.add_argument('--antigen', '-ag', type=str, required=True,\n                        help='Directory path to input antigen PDB files')\n    parser.add_argument(\n        '--output',\n        type=str,\n        default='outputs',\n        help='Directory path to output PDB files, default is \"outputs\"',\n    )\n    parser.add_argument(\n        '--epitope',\n        default=None,\n        nargs='+', type=int,\n        help='epitope residues in antigen chain A , for example: 1 2 3 4 55',\n    )\n    parser.add_argument(\n        '--device', '-d', type=str, default=None, help='inference device'\n    )\n    parser.add_argument(\n        '--steps', '-s', type=int, default=10, help='number of sampling steps'\n    )\n    parser.add_argument(\n        '--chunk_size', '-cs',\n        type=int,\n        default=64,\n        help='chunk size for long chain inference',\n    )\n    parser.add_argument(\n        '--num_samples', '-ns',\n        type=int,\n        default=1,\n        help='number of samples for each input',\n    )\n    parser.add_argument(\n        '--cal_epitope', '-ce',\n        action='store_true',\n        default=False,\n        help='if use, will calculate epitope from antigen pdb',\n    )\n    args = parser.parse_args()\n\n    return args\n\n\ndef predict(args):\n    \"\"\"Predict antibody & antigen sequence and structures w/ pre-trained IgGM-Ag models.\"\"\"\n    pdb_path = args.antigen\n    fasta_path = args.fasta\n\n    sequences, ids, _ = parse_fasta(fasta_path)\n    assert len(sequences) in (1, 2, 3), f\"must be 1, 2 or 3 chains in fasta file\"\n    chains = [{\"sequence\": seq, \"id\": seq_id} for seq, seq_id in zip(sequences, ids) if seq_id != ids[-1]]\n    _, basename = os.path.split(fasta_path)\n    if args.cal_epitope:\n        epitope = cal_ppi(pdb_path, ids)\n        epitope = torch.nonzero(epitope).flatten().tolist()\n        print(f\"epitope: {' '.join(str(i) for i in epitope)}\")\n        return\n    name = basename.split(\".\")[0]\n    output = f\"{args.output}/{name}.pdb\"\n\n    aa_seq, atom_cord, atom_cmsk, _, _ = PdbParser.load(pdb_path, chain_id=ids[-1])\n    if args.epitope is None:\n        try:\n            epitope = cal_ppi(pdb_path, ids)\n        except:\n            epitope = args.epitope\n    else:\n        epitope = torch.zeros(len(aa_seq))\n        for i in args.epitope:\n            epitope[i] = 1\n    chains.append({\"sequence\": aa_seq,\n                    \"cord\": atom_cord,\n                    \"cmsk\": atom_cmsk,\n                    \"epitope\": epitope,\n                    \"id\": ids[-1]})\n\n\n    batches = [\n        {\n            \"name\": name,\n            \"chains\": chains,\n            \"output\": f\"{args.output}/{name}_{i}.pdb\",\n        }\n        for i in range(args.num_samples)\n    ]\n\n    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n    # antibody & antigen structures prediction & sequence design\n    designer = AbDesigner(\n        ppi_path=esm_ppi_650m_ab(),\n        design_path=antibody_design_trunk(),\n        buffer_path=IGSO3Buffer_trunk(),\n        config=args,\n    )\n    designer.to(device)\n\n    chunk_size = args.chunk_size\n    print(f\"#inference samples: {len(batches)}\")\n    for task in tqdm.tqdm(batches):\n        designer.infer_pdb(task[\"chains\"], filename=task[\"output\"], chunk_size=chunk_size)\n\n\ndef main():\n    args = parse_args()\n    setup(True)\n    predict(args)\n\n\nif __name__ == '__main__':\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/design.py b/design.py
--- a/design.py	(revision cfd7f4abfbdc207e2e55b531d524ecaf95f634e0)
+++ b/design.py	(date 1741951063940)
@@ -110,7 +110,8 @@
     # antibody & antigen structures prediction & sequence design
     designer = AbDesigner(
         ppi_path=esm_ppi_650m_ab(),
-        design_path=antibody_design_trunk(),
+        # design_path=antibody_design_trunk(),
+        design_path='/mnt/ai4x_ceph/fandiwu/buddy1/wangrubo/output/diffpd/inverse_fold_4/model_dir/trgt_last_epoch.pth',
         buffer_path=IGSO3Buffer_trunk(),
         config=args,
     )
